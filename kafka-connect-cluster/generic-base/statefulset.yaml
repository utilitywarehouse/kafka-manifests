apiVersion: v1
kind: Service
metadata:
  name: &app kafka-connect-cluster
  labels:
    app.kubernetes.io/name: *app
  annotations:
    prometheus.io/scrape: "false"
    uw.health.aggregator.enable: 'false'
spec:
  clusterIP: None
  ports:
    - name: api
      port: 8083
      targetPort: 8083
  selector:
    app.kubernetes.io/name: *app
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: &app kafka-connect-cluster
  annotations:
    "app.uw.systems/tags.oss": "true"
    "app.uw.systems/tier": "tier_4"
    "app.uw.systems/description": "Kafka Connect cluster"
    # the name of the secret holding the TLS assets
    secret.reloader.stakater.com/reload: "TBD"
spec:
  replicas: 1
  serviceName: kafka-connect-cluster
  selector:
    matchLabels:
      app.kubernetes.io/name: *app
  template:
    metadata:
      labels:
        app: *app
        app.kubernetes.io/name: *app
    spec:
      terminationGracePeriodSeconds: 30
      imagePullSecrets:
        - name: dockerhub-key
      containers:
        - name: *app
          imagePullPolicy: Always
          image: confluentinc/cp-kafka-connect:7.8.0
          ports:
            - containerPort: 8083
              name: api
              protocol: TCP
          env:
            - name: CONNECT_REST_PORT
              value: "8083"
            - name: CONNECT_SECURITY_PROTOCOL
              value: "SSL"
            - name: CONNECT_SSL_KEYSTORE_LOCATION
              value: "/etc/kafka-connect/certs/keystore.jks"
            - name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
              value: "3"
            - name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
              value: "3"
            - name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
              value: "3"
            - name: CONNECT_KEY_CONVERTER
              value: "org.apache.kafka.connect.storage.StringConverter"
            - name: CONNECT_VALUE_CONVERTER
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: CONNECT_CONSUMER_SECURITY_PROTOCOL
              value: SSL
            - name: CONNECT_CONSUMER_SSL_KEYSTORE_LOCATION
              value: "/etc/kafka-connect/certs/keystore.jks"
            - name: CONNECT_PRODUCER_SECURITY_PROTOCOL
              value: SSL
            - name: CONNECT_PRODUCER_SSL_KEYSTORE_LOCATION
              value: "/etc/kafka-connect/certs/keystore.jks"
            - name: CONNECT_PLUGIN_PATH
              value: "/usr/share/java,/usr/share/confluent-hub-components/"

            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONNECT_REST_ADVERTISED_HOST_NAME
              # This should have the format: $(POD_NAME).{{service-name}}.{{namespace}}.svc.cluster.local
              value: "TBD"
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: "TBD"
            - name: CONNECT_GROUP_ID
              value: "TBD"
            - name: CONNECT_CONFIG_STORAGE_TOPIC
              value: "TBD"
            - name: CONNECT_OFFSET_STORAGE_TOPIC
              value: "TBD"
            - name: CONNECT_STATUS_STORAGE_TOPIC
              value: "TBD"
            # Consumer-specific - doesn't inherit from top level
            - name: CONNECT_CONSUMER_GROUP_ID
              value: "TBD"
            - name: CONNECT_CONSUMER_SSL_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  # the name of the secret that holds the data for jks
                  name: TBD
                  key: jks.password
            - name: CONNECT_PRODUCER_SSL_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  # the name of the secret that holds the data for jks
                  name: TBD
                  key: jks.password
            - name: CONNECT_SSL_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  # the name of the secret that holds the data for jks
                  name: TBD
                  key: jks.password
          resources:
            limits:
              cpu: 2
              memory: 4Gi
          volumeMounts:
            - name: kafka-certificates
              mountPath: /etc/kafka-connect/certs
              readOnly: true
      volumes:
        - name: kafka-certificates
          secret:
            # The name of the secret set in kafka-cert.yaml, holding the tls assets
            secretName: TBD

